{
  "description": "DeveloperConfiguration holds developer options",
  "type": "object",
  "properties": {
    "cpuAllocationRatio": {
      "description": "For each requested virtual CPU, CPUAllocationRatio defines how much physical CPU to request per VMI from the hosting node. The value is in fraction of a CPU thread (or core on non-hyperthreaded nodes). For example, a value of 1 means 1 physical CPU thread per VMI CPU thread. A value of 100 would be 1% of a physical thread allocated for each requested VMI thread. This option has no effect on VMIs that request dedicated CPUs. More information at: https://kubevirt.io/user-guide/operations/node_overcommit/#node-cpu-allocation-ratio Defaults to 10",
      "type": "integer",
      "format": "int32"
    },
    "diskVerification": {
      "description": "DiskVerification holds container disks verification limits",
      "type": "object",
      "required": [
        "memoryLimit"
      ],
      "properties": {
        "memoryLimit": {
          "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "featureGates": {
      "description": "FeatureGates is the list of experimental features to enable. Defaults to none",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "logVerbosity": {
      "description": "LogVerbosity sets log verbosity level of  various components",
      "type": "object",
      "properties": {
        "nodeVerbosity": {
          "description": "NodeVerbosity represents a map of nodes with a specific verbosity level",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "virtAPI": {
          "type": "integer",
          "format": "int32"
        },
        "virtController": {
          "type": "integer",
          "format": "int32"
        },
        "virtHandler": {
          "type": "integer",
          "format": "int32"
        },
        "virtLauncher": {
          "type": "integer",
          "format": "int32"
        },
        "virtOperator": {
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "memoryOvercommit": {
      "description": "MemoryOvercommit is the percentage of memory we want to give VMIs compared to the amount given to its parent pod (virt-launcher). For example, a value of 102 means the VMI will \"see\" 2% more memory than its parent pod. Values under 100 are effectively \"undercommits\". Overcommits can lead to memory exhaustion, which in turn can lead to crashes. Use carefully. Defaults to 100",
      "type": "integer",
      "format": "int32"
    },
    "minimumClusterTSCFrequency": {
      "description": "Allow overriding the automatically determined minimum TSC frequency of the cluster and fixate the minimum to this frequency.",
      "type": "integer",
      "format": "int64"
    },
    "minimumReservePVCBytes": {
      "description": "MinimumReservePVCBytes is the amount of space, in bytes, to leave unused on disks. Defaults to 131072 (128KiB)",
      "type": "integer",
      "format": "int64"
    },
    "nodeSelectors": {
      "description": "NodeSelectors allows restricting VMI creation to nodes that match a set of labels. Defaults to none",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "pvcTolerateLessSpaceUpToPercent": {
      "description": "LessPVCSpaceToleration determines how much smaller, in percentage, disk PVCs are allowed to be compared to the requested size (to account for various overheads). Defaults to 10",
      "type": "integer",
      "format": "int32"
    },
    "useEmulation": {
      "description": "UseEmulation can be set to true to allow fallback to software emulation in case hardware-assisted emulation is not available. Defaults to false",
      "type": "boolean"
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}