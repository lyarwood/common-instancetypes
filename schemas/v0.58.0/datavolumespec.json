{
  "description": "DataVolumeSpec defines the DataVolume type specification",
  "type": "object",
  "properties": {
    "checkpoints": {
      "description": "Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.",
      "type": "array",
      "items": {
        "description": "DataVolumeCheckpoint defines a stage in a warm migration.",
        "type": "object",
        "required": [
          "previous",
          "current"
        ],
        "properties": {
          "current": {
            "description": "Current is the identifier of the snapshot created for this checkpoint.",
            "type": "string"
          },
          "previous": {
            "description": "Previous is the identifier of the snapshot from the previous checkpoint.",
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    "contentType": {
      "description": "DataVolumeContentType options: \"kubevirt\", \"archive\"",
      "type": "string"
    },
    "finalCheckpoint": {
      "description": "FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.",
      "type": "boolean"
    },
    "preallocation": {
      "description": "Preallocation controls whether storage for DataVolumes should be allocated in advance.",
      "type": "boolean"
    },
    "priorityClassName": {
      "description": "PriorityClassName for Importer, Cloner and Uploader pod",
      "type": "string"
    },
    "pvc": {
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
      "type": "object",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dataSource": {
          "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
          "type": "object",
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "apiGroup": {
              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
              "type": "string"
            },
            "kind": {
              "description": "Kind is the type of resource being referenced",
              "type": "string"
            },
            "name": {
              "description": "Name is the name of resource being referenced",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "dataSourceRef": {
          "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
          "type": "object",
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "apiGroup": {
              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
              "type": "string"
            },
            "kind": {
              "description": "Kind is the type of resource being referenced",
              "type": "string"
            },
            "name": {
              "description": "Name is the name of resource being referenced",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "resources": {
          "description": "ResourceRequirements describes the compute resource requirements.",
          "type": "object",
          "properties": {
            "limits": {
              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": "object",
              "additionalProperties": {
                "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                "type": "string"
              }
            },
            "requests": {
              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": "object",
              "additionalProperties": {
                "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "selector": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string",
                    "x-kubernetes-patch-merge-key": "key",
                    "x-kubernetes-patch-strategy": "merge"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
          "type": "string"
        },
        "volumeName": {
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "source": {
      "description": "DataVolumeSource represents the source for our Data Volume, this can be HTTP, Imageio, S3, Registry or an existing PVC",
      "type": "object",
      "properties": {
        "blank": {
          "description": "DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC",
          "type": "object"
        },
        "http": {
          "description": "DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs",
          "type": "object",
          "required": [
            "url"
          ],
          "properties": {
            "certConfigMap": {
              "description": "CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate",
              "type": "string"
            },
            "extraHeaders": {
              "description": "ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "secretExtraHeaders": {
              "description": "SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "secretRef": {
              "description": "SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded",
              "type": "string"
            },
            "url": {
              "description": "URL is the URL of the http(s) endpoint",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "imageio": {
          "description": "DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source",
          "type": "object",
          "required": [
            "url",
            "diskId"
          ],
          "properties": {
            "certConfigMap": {
              "description": "CertConfigMap provides a reference to the CA cert",
              "type": "string"
            },
            "diskId": {
              "description": "DiskID provides id of a disk to be imported",
              "type": "string"
            },
            "secretRef": {
              "description": "SecretRef provides the secret reference needed to access the ovirt-engine",
              "type": "string"
            },
            "url": {
              "description": "URL is the URL of the ovirt-engine",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "pvc": {
          "description": "DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC",
          "type": "object",
          "required": [
            "namespace",
            "name"
          ],
          "properties": {
            "name": {
              "description": "The name of the source PVC",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace of the source PVC",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "registry": {
          "description": "DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source",
          "type": "object",
          "properties": {
            "certConfigMap": {
              "description": "CertConfigMap provides a reference to the Registry certs",
              "type": "string"
            },
            "imageStream": {
              "description": "ImageStream is the name of image stream for import",
              "type": "string"
            },
            "pullMethod": {
              "description": "PullMethod can be either \"pod\" (default import), or \"node\" (node docker cache based import)",
              "type": "string"
            },
            "secretRef": {
              "description": "SecretRef provides the secret reference needed to access the Registry source",
              "type": "string"
            },
            "url": {
              "description": "URL is the url of the registry source (starting with the scheme: docker, oci-archive)",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "s3": {
          "description": "DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source",
          "type": "object",
          "required": [
            "url"
          ],
          "properties": {
            "certConfigMap": {
              "description": "CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate",
              "type": "string"
            },
            "secretRef": {
              "description": "SecretRef provides the secret reference needed to access the S3 source",
              "type": "string"
            },
            "url": {
              "description": "URL is the url of the S3 source",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "upload": {
          "description": "DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source",
          "type": "object"
        },
        "vddk": {
          "description": "DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source",
          "type": "object",
          "properties": {
            "backingFile": {
              "description": "BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi",
              "type": "string"
            },
            "initImageURL": {
              "description": "InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map",
              "type": "string"
            },
            "secretRef": {
              "description": "SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host",
              "type": "string"
            },
            "thumbprint": {
              "description": "Thumbprint is the certificate thumbprint of the vCenter or ESXi host",
              "type": "string"
            },
            "url": {
              "description": "URL is the URL of the vCenter or ESXi host with the VM to migrate",
              "type": "string"
            },
            "uuid": {
              "description": "UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "sourceRef": {
      "description": "DataVolumeSourceRef defines an indirect reference to the source of data for the DataVolume",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "kind": {
          "description": "The kind of the source reference, currently only \"DataSource\" is supported",
          "type": "string"
        },
        "name": {
          "description": "The name of the source reference",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the source reference, defaults to the DataVolume namespace",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "storage": {
      "description": "StorageSpec defines the Storage type specification",
      "type": "object",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dataSource": {
          "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
          "type": "object",
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "apiGroup": {
              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
              "type": "string"
            },
            "kind": {
              "description": "Kind is the type of resource being referenced",
              "type": "string"
            },
            "name": {
              "description": "Name is the name of resource being referenced",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "resources": {
          "description": "ResourceRequirements describes the compute resource requirements.",
          "type": "object",
          "properties": {
            "limits": {
              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": "object",
              "additionalProperties": {
                "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                "type": "string"
              }
            },
            "requests": {
              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": "object",
              "additionalProperties": {
                "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "selector": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string",
                    "x-kubernetes-patch-merge-key": "key",
                    "x-kubernetes-patch-strategy": "merge"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
          "type": "string"
        },
        "volumeName": {
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}